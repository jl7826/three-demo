{
  "version": 3,
  "sources": ["../three/examples/jsm/loaders/FontLoader.js"],
  "sourcesContent": ["import {\n\tFileLoader,\n\tLoader,\n\tShapePath\n} from 'three';\n\nclass FontLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tlet json;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t}\n\n\t\t\tconst font = scope.parse( json );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\treturn new Font( json );\n\n\t}\n\n}\n\n//\n\nclass Font {\n\n\tconstructor( data ) {\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tgenerateShapes( text, size = 100 ) {\n\n\t\tconst shapes = [];\n\t\tconst paths = createPaths( text, size, this.data );\n\n\t\tfor ( let p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nfunction createPaths( text, size, data ) {\n\n\tconst chars = Array.from( text );\n\tconst scale = size / data.resolution;\n\tconst line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tconst paths = [];\n\n\tlet offsetX = 0, offsetY = 0;\n\n\tfor ( let i = 0; i < chars.length; i ++ ) {\n\n\t\tconst char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tconst ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\tconst glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) {\n\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\treturn;\n\n\t}\n\n\tconst path = new ShapePath();\n\n\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tconst outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( let i = 0, l = outline.length; i < l; ) {\n\n\t\t\tconst action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\nFont.prototype.isFont = true;\n\nexport { FontLoader, Font };\n"],
  "mappings": "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",
  "names": []
}
